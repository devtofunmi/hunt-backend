generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  email        String
  username     String          @unique
  password     String
  image        String?
  bio          String?
  twitter      String?
  github       String?
  linkedin     String?
  bluesky      String?
  createdAt    DateTime        @default(now())

  // Relations
  savedProducts SavedProduct[]
  upvotes       Upvote[]
  products      Product[]
  socialLinks   SocialLink[]  
}


model Product {
  id               String         @id @default(uuid())
  title            String
  logo             String
  shortDescription String
  fullDescription  String
  link             String
  githubUrl        String
  tags             String[]
  upvotes          Int            @default(0)
  views            Int            @default(0) 
  isFeatured       Boolean        @default(false) 
  createdAt        DateTime       @default(now())

  twitter          String?
  github           String?
  linkedin         String?
  bluesky          String?

  userId           String
  user             User           @relation(fields: [userId], references: [id])

  // Relations
  saves            SavedProduct[]
  upvoters         Upvote[]
  socialLinks      SocialLink[]
}


model SavedProduct {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Upvote {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  url       String
  productId String?
  userId    String?

  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}